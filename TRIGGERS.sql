
--ZADANIEM WYZWALACZA JEST UTORZENIE W NOWEJ TABELI "MAGAZYN" INFORMACJI O STANIE SPRZETU W ZALEZNOSCI CZY ZOSTAŁ ON ZAKTUALIZOWANY
--LUB USUNIETY, WYZWALACZ URACHAMIA SIE PO ZADARZENIU WYZWALAJACYM, DLA AKTUALIZACJI ZOSTANIE WPISANA INFORMACJA 'WYPOZYCZONY', DLA USUNIECIA POJAWI SIE NAPIS 'W NAPRAWIE', DODATKOWO
--W NOWEJ TABELI BEDZIE WIDNIALA NAZWA TABELI Z KTOREJ AKYUALIZOWALISMY/USUWALISMY DANE, NAZWA_TRANSAKCJI DO KTOREJ ZOSTANA WPISANE NASZE WYZWALACZE
--ORAZ DATA WPROWADZONYCH ZMIAN

create table magazyn
(id_magazynu NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
nazwa_tabeli VARCHAR2(225),
nazwa_transakcji VARCHAR2(15),
data_transakcji date);

CREATE OR REPLACE TRIGGER wypozyczenie_magazyn_trg
AFTER UPDATE OR DELETE 
ON sprzet
FOR EACH ROW 
DECLARE
    stan_sprzetu_na_magazynie VARCHAR2(15);
    BEGIN
    stan_sprzetu_na_magazynie := CASE
    WHEN UPDATING THEN 'WYPOZYCZONY'
    WHEN DELETING THEN 'W NAPRAWIE'
    END;
    
INSERT INTO magazyn (nazwa_tabeli,nazwa_transakcji,data_transakcji) VALUES ('SPRZET', stan_sprzetu_na_magazynie, SYSDATE);
END;

SELECT *FROM SPRZET;
SELECT *FROM MAGAZYN;
UPDATE 
sprzet
SET
   CENA_ZA_DOBE = CENA_ZA_DOBE+10
WHERE
   STATUS_SPRZETU ='DOBRY';
   
SELECT *FROM SPRZET;
SELECT *FROM MAGAZYN;


DROP TRIGGER wypozyczenie_magazyn_trg;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--ZADANIEM WYZWALACZA JEST SPRAWDZENIE PRZED ZDARZENIEM WYZWALAJACYM, CZY NOWO WPROWADZONA DATA MOZE BYC ZAKTUALIZOWANA W TABELI, 
--SPRAWDZAJAC ZAKRES DAT USTALONY W WYZWALACZU OD 10 DO 31 DNIA MIESIACA NIE MOZNA WPROWADZAC ZMIAN, DZIALA ON W ZALEZNOSCI OD AKTUALNEJ DATY
--ZMIANY MOZEMY WPROWADZAC OD 1 DO 9 DNIA MIESIACA, GDYZ PROGRAM ZCZYTUJE AKTUALNA NASZA DATE, GDY BEDZIEMY PROBOWAC ZMIENIC DATE W OKRESIE ZABRONIONYM 
--POJAWI NAM SIE BLAD -20100 Z WCZESNIEJ ZAPROGRAMOWANA INFORMACJA

CREATE OR REPLACE TRIGGER rezerwacja_sprzetu_trg
    BEFORE UPDATE OF data_rezerwacji_od  
    ON rezerwacja
DECLARE
    dzien_miesiaca NUMBER;
BEGIN
    dzien_miesiaca := EXTRACT(DAY FROM sysdate);
 
    IF dzien_miesiaca BETWEEN 10 AND 31 THEN
        raise_application_error(-20100,'Nie mozna wypozyczyc sprzetu w terminie od 10 do 31');
    END IF;
END;



select * from rezerwacja
;

UPDATE 
    rezerwacja 
SET 
    data_rezerwacji_od =  date'2019-10-01';
select * from rezerwacja
;


DROP TRIGGER rezerwacja_sprzetu_trg;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--WYZWALACZ SPRAWDZA PRZED ZDARZENIEM WYZWALAJACYM CZY NOWA CENA NIE JEST ZWIESZKONA PODWOJNIE, POTROJNIE ITD. PRZY AKTUALIZACJI REKORDU CENY.
--NOWA CENA JEST POROWNYWANA Z DWUKROTNOSCIA STAREJ CENY I NA TEJ PODSTAWIE, GDY CENA BEDZIE ZWIEKSZONA WIECEJ NIZ DWUKROTNOSC STAREJ CENY POJAWI SIE
--BLAD -20100 Z WCZESNIEJ WPISANA INFORMACJA, JESLI AKTUALIZACJA REKORDU BEDZIE SIE ZGADZAC CENA ZOSTANIE ZAKTUALIZOWANA POPRAWNIE

CREATE OR REPLACE TRIGGER zwiekszenie_ceny_sprzetu_trg 
    BEFORE UPDATE OF CENA
    ON WYPOZYCZENIE
    FOR EACH ROW
    WHEN (NEW.cena > 0)
BEGIN
    IF :NEW.cena >= 2 * :OLD.cena THEN
        raise_application_error(-20101,' Nowa cena sprzetu: ' || :NEW.cena || 
            ' nie moze byc zwiekszona podwojnie, obecna cena wynosi: ' || :OLD.cena);
    END IF;
END;

SELECT CENA 
FROM WYPOZYCZENIE 
WHERE sprzet_id_sprzetu = 1;

UPDATE WYPOZYCZENIE
SET CENA = 1000
WHERE SPRZET_ID_SPRZETU = 1;

DROP TRIGGER zwiekszenie_ceny_sprzetu_trg;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------